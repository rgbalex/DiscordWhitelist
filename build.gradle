plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
}

group = 'org.rgbalex'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
}

dependencies {
    implementation("net.dv8tion:JDA:6.0.0") { // replace $version with the latest version
        // Optionally disable audio natives to reduce jar size by excluding `opus-java` and `tink`
        exclude module: 'opus-java' // required for encoding audio into opus, not needed if audio is already provided in opus encoding
        exclude module: 'tink' // required for encrypting and decrypting audio
    }
    compileOnly("org.spigotmc:spigot-api:1.21.8-R0.1-SNAPSHOT")
}

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.21")
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}


// do a custom build, and put the file in C:\Users\Alexander\Documents\ServerTest\plugins, removing the old one, and then run a custom command
tasks.register('copyJarToServer', Copy) {
    dependsOn(tasks.build)
    from("build/libs/${rootProject.name}-${version}.jar")
    into("C:/Users/Alexander/Documents/ServerTest/plugins")

    doFirst {
        delete file("C:/Users/Alexander/Documents/ServerTest/plugins/${rootProject.name}-${version}.jar")
    }
}

// do a custom build, and put the file in C:\Users\Alexander\Documents\ServerTest\plugins, removing the old one, and then run a custom command starting a jar file
tasks.register('buildAndRunServer') {
    dependsOn(tasks.build)
    dependsOn(tasks.named('copyJarToServer'))
    doLast {
        exec {
            workingDir = file("C:/Users/Alexander/Documents/ServerTest")
            commandLine "java", "-jar", "server.jar", "nogui"
        }
    }
}
